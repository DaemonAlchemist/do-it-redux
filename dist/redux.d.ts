import { IBlocker, ITask, ITaskCustomAction, IUser, IWorkflow } from './types.d';
export declare const user: {
    tasks: import("the-reducer").ChildSelector<ITask>;
    add: (entity: import("the-reducer").PartialEntity<IUser>) => import("the-reducer").IEntityAddAction<IUser>;
    addMultiple: (entities: import("the-reducer").PartialEntity<IUser>[]) => import("the-reducer").IEntityAddMultipleAction<IUser>;
    update: (entity: import("the-reducer").PartialEntity<IUser>) => import("the-reducer").IEntityUpdateAction<IUser>;
    updateMultiple: (entities: import("the-reducer").PartialEntity<IUser>[]) => import("the-reducer").IEntityUpdateMultipleAction<IUser>;
    delete: (id: string) => import("the-reducer").IEntityDeleteAction<IUser>;
    deleteMultiple: (ids: string[]) => import("the-reducer").IEntityDeleteMultipleAction<IUser>;
    clear: () => import("the-reducer").IEntityClearAction<IUser>;
    custom: (type: string, data: {}) => import("the-reducer").IEntityCustomAction<IUser, {}>;
    exists: (state: import("the-reducer").IEntityContainer<IUser>, id: string) => boolean;
    get: (state: import("the-reducer").IEntityContainer<IUser>, id: string) => IUser;
    getMultiple: (state: import("the-reducer").IEntityContainer<IUser>, filter: import("the-reducer").Filter<IUser>) => IUser[];
    reducer: import("the-reducer").IEntityReducer<IUser, {}>;
};
export declare const task: {
    blockers: import("the-reducer").RelatedSelector<IBlocker, ITask>;
    complete: (id: string) => import("the-reducer").IEntityUpdateAction<ITask>;
    createId: (userId: string, description: string) => string;
    dependentTasks: import("the-reducer").RelatedSelector<IBlocker, ITask>;
    user: import("the-reducer").ParentSelector<IUser, ITask>;
    add: (entity: import("the-reducer").PartialEntity<ITask>) => import("the-reducer").IEntityAddAction<ITask>;
    addMultiple: (entities: import("the-reducer").PartialEntity<ITask>[]) => import("the-reducer").IEntityAddMultipleAction<ITask>;
    update: (entity: import("the-reducer").PartialEntity<ITask>) => import("the-reducer").IEntityUpdateAction<ITask>;
    updateMultiple: (entities: import("the-reducer").PartialEntity<ITask>[]) => import("the-reducer").IEntityUpdateMultipleAction<ITask>;
    delete: (id: string) => import("the-reducer").IEntityDeleteAction<ITask>;
    deleteMultiple: (ids: string[]) => import("the-reducer").IEntityDeleteMultipleAction<ITask>;
    clear: () => import("the-reducer").IEntityClearAction<ITask>;
    custom: (type: string, data: ITaskCustomAction) => import("the-reducer").IEntityCustomAction<ITask, ITaskCustomAction>;
    exists: (state: import("the-reducer").IEntityContainer<ITask>, id: string) => boolean;
    get: (state: import("the-reducer").IEntityContainer<ITask>, id: string) => ITask;
    getMultiple: (state: import("the-reducer").IEntityContainer<ITask>, filter: import("the-reducer").Filter<ITask>) => ITask[];
    reducer: import("the-reducer").IEntityReducer<ITask, ITaskCustomAction>;
};
export declare const blocker: import("the-reducer").Entity<IBlocker, {}>;
export declare const workflow: {
    util: {
        updateDescription: (workflow: IWorkflow, description: string) => IWorkflow;
        updateParam: (workflow: IWorkflow, name: string, description: string) => IWorkflow;
        removeParam: (workflow: IWorkflow, name: string) => IWorkflow;
        removeTask: (workflow: IWorkflow, taskId: string) => IWorkflow;
        addTask: (workflow: IWorkflow, task: import("./types").IWorkflowTask) => IWorkflow;
        updateTaskId: (workflow: IWorkflow, oldId: string, newId: string) => IWorkflow;
        updateTaskDependencies: (workflow: IWorkflow, id: string, dependsOn: string[]) => IWorkflow;
        updateTaskDescription: (workflow: IWorkflow, id: string, description: string) => IWorkflow;
        updateTaskUser: (workflow: IWorkflow, id: string, userId: string) => IWorkflow;
    };
    add: (entity: import("the-reducer").PartialEntity<IWorkflow>) => import("the-reducer").IEntityAddAction<IWorkflow>;
    addMultiple: (entities: import("the-reducer").PartialEntity<IWorkflow>[]) => import("the-reducer").IEntityAddMultipleAction<IWorkflow>;
    update: (entity: import("the-reducer").PartialEntity<IWorkflow>) => import("the-reducer").IEntityUpdateAction<IWorkflow>;
    updateMultiple: (entities: import("the-reducer").PartialEntity<IWorkflow>[]) => import("the-reducer").IEntityUpdateMultipleAction<IWorkflow>;
    delete: (id: string) => import("the-reducer").IEntityDeleteAction<IWorkflow>;
    deleteMultiple: (ids: string[]) => import("the-reducer").IEntityDeleteMultipleAction<IWorkflow>;
    clear: () => import("the-reducer").IEntityClearAction<IWorkflow>;
    custom: (type: string, data: {}) => import("the-reducer").IEntityCustomAction<IWorkflow, {}>;
    exists: (state: import("the-reducer").IEntityContainer<IWorkflow>, id: string) => boolean;
    get: (state: import("the-reducer").IEntityContainer<IWorkflow>, id: string) => IWorkflow;
    getMultiple: (state: import("the-reducer").IEntityContainer<IWorkflow>, filter: import("the-reducer").Filter<IWorkflow>) => IWorkflow[];
    reducer: import("the-reducer").IEntityReducer<IWorkflow, {}>;
};
